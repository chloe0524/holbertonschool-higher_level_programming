Testing the `BaseGeometry` class modules in Python
==================================================

This is a doctest file for testing the `BaseGeometry` class modules in Python.
It provides examples and of how to use the function.

Import file:
------------

.. code-block:: python

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> base_geometry = BaseGeometry()

Empty `area()` module:
----------------------

.. code-block:: python

    >>> base_geometry.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Empty or missing argument `base_geometry` module:
-------------------------------------------------

.. code-block:: python

    >>> base_geometry.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> base_geometry.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

`base_geometry` module with `None` value:
-----------------------------------------

.. code-block:: python

    >>> base_geometry.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


`base_geometry` module with reguler argument:
---------------------------------------------

.. code-block:: python

    >>> base_geometry.integer_validator("age", 38)

`base_geometry` module with 0 or negative value:
------------------------------------------------

.. code-block:: python

    >>> base_geometry.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    >>> base_geometry.integer_validator("age", -38)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

`base_geometry` module with non-integer value:
----------------------------------------------

.. code-block:: python

    >>> base_geometry.integer_validator("age", "38")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> base_geometry.integer_validator("age", [38])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> base_geometry.integer_validator("age", (38, 40))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> base_geometry.integer_validator("age", {38, 40})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> base_geometry.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer
